const fruits = ["사과", "바나나", "수박"];
console.log(fruits); // [ '사과', '바나나', '수박' ]
console.log(...fruits); // 사과 바나나 수박

// --------------------------------------------------------
function conLog(a, b, c) {
  console.log(a, b, c);
}

conLog(fruits[0], fruits[1], fruits[2]); // 사과 바나나 수박
conLog(...fruits) // 사과 바나나 수박
--------------------------------------------------------


// // 나머지 연산자 (매개 변수일 때)
// // 매개 변수에 너무 많은 값이 들어올 때 나머지 연산자

// const fruits = ["사과", "바나나", "수박", "망고", "딸기"];
// console.log(fruits); // [ '사과', '바나나', '수박', '망고', '딸기' ]
// console.log(...fruits); // 사과 바나나 수박 망고 딸기

// // --------------------------------------------------------
// function conLog(a, b, ...c) {
//   console.log(a, b, c); // c는 아래처럼 [ '수박', '망고', '딸기' ] 배열로 한꺼번에 다녀옴
//   // 1, 2 번쨰만 중요하고 나머지는 그냥 버리진 못하겠고 할 때 중요한 것만 받아올 때 편안하게 사용
// }

// // conLog(fruits[0], fruits[1], fruits[2]);
// conLog(...fruits) // 사과 바나나 [ '수박', '망고', '딸기' ]
// // --------------------------------------------------------


// 전체 받을 때 rest 사용

const fruits = ["사과", "바나나", "수박", "망고", "딸기"];
console.log(fruits); // [ '사과', '바나나', '수박', '망고', '딸기' ]
console.log(...fruits); // 사과 바나나 수박 망고 딸기

// --------------------------------------------------------
function conLog(...rest) {
  rest.map((item) => console.log(item));
}

// conLog(fruits[0], fruits[1], fruits[2]);
conLog(...fruits)
//
// 사과
// 바나나
// 수박
// 망고
// 딸기

const str = "apple";
// str.map(item => console.log(item)); // 문자열에는 map 이라는 함수가 없다.
// 그래서 이 문자를 배열로 만들어줘야한다. 전기연산자 사용하면 쉽다.
const strToArr = [...str]; // 배열 안에 흩뿌려짐. 배열을 선언한 것 처럼 된다.
console.log(strToArr) // [ 'a', 'p', 'p', 'l', 'e' ]

// 꽤나 많이 쓰게 된다. 동일한 기능 한거 문자열 함수에서 이렇게 배우긴 했다는 점.
const strToArr2 = str.split("");
console.log(strToArr2); // [ 'a', 'p', 'p', 'l', 'e' ]
// --------------------------------------------------------

// 전기 연산자는 코테에서 많이 사용한다.
// 하나하나 배워 나가면 좋다.


